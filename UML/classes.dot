digraph "classes" {
rankdir=TB
charset="utf-8"
subgraph layer0{
    rank = same;
    "digifloat.DigiFloat.MainWindow" [color="black", fontcolor="black", label=<{MainWindow|atlasSensor<br ALIGN="LEFT"/>bronkhorstFlowControlModel<br ALIGN="LEFT"/>camAdapter<br ALIGN="LEFT"/>controller<br ALIGN="LEFT"/>dataForwarder<br ALIGN="LEFT"/>dfont : tuple<br ALIGN="LEFT"/>dropDownMenu<br ALIGN="LEFT"/>imageStorage<br ALIGN="LEFT"/>lidar<br ALIGN="LEFT"/>nodered_in_network<br ALIGN="LEFT"/>offline_image_storage<br ALIGN="LEFT"/>openWindows : list<br ALIGN="LEFT"/>tabViewBronkhorstFlowControl<br ALIGN="LEFT"/>tabViewCalibCam<br ALIGN="LEFT"/>tabViewCalibLidar<br ALIGN="LEFT"/>tabViewCalibSensors<br ALIGN="LEFT"/>tabViewInformation<br ALIGN="LEFT"/>tabViewRestartExit<br ALIGN="LEFT"/>tabViewRun<br ALIGN="LEFT"/>tabViewSetup<br ALIGN="LEFT"/>tabs<br ALIGN="LEFT"/>taskModel<br ALIGN="LEFT"/>|closeEvent(event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
}
subgraph layer1{
    rank = same;
    "digifloat.DigiFloat.EnterProjectWindow" [color="black", fontcolor="black", label=<{EnterProjectWindow|configuration : NoneType, dict<br ALIGN="LEFT"/>lineEdit_project<br ALIGN="LEFT"/>|handleSetButtonPushed()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
    "digifloat.libs.dropDownMenu.DropDownMenu" [color="black", fontcolor="black", label=<{DropDownMenu|mainWindow<br ALIGN="LEFT"/>offline_action<br ALIGN="LEFT"/>online_action<br ALIGN="LEFT"/>|handle_offline_aquisition_action()<br ALIGN="LEFT"/>handle_online_aquisition_action()<br ALIGN="LEFT"/>make_the_menu_bar()<br ALIGN="LEFT"/>openOnlineConfigWindow()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
    "digifloat.libs.controller.Controller" [color="black", fontcolor="black", label=<{Controller|atlasSensor<br ALIGN="LEFT"/>bronkhorstFlowControlModel<br ALIGN="LEFT"/>calib_cam_timer<br ALIGN="LEFT"/>camAdapter<br ALIGN="LEFT"/>configuration : NoneType, dict<br ALIGN="LEFT"/>dataForwarder<br ALIGN="LEFT"/>deviceDictionary<br ALIGN="LEFT"/>fetch_measurement_timer<br ALIGN="LEFT"/>imageStorage<br ALIGN="LEFT"/>lidar<br ALIGN="LEFT"/>run_timer<br ALIGN="LEFT"/>tabViewBronkhorstFlowControl<br ALIGN="LEFT"/>tabViewCalibCam<br ALIGN="LEFT"/>tabViewCalibLidar<br ALIGN="LEFT"/>tabViewCalibSensors<br ALIGN="LEFT"/>tabViewInformation<br ALIGN="LEFT"/>tabViewRestartExit<br ALIGN="LEFT"/>tabViewRun<br ALIGN="LEFT"/>tabViewSetup<br ALIGN="LEFT"/>tabWidget<br ALIGN="LEFT"/>taskModel<br ALIGN="LEFT"/>|activateCalibrationTabs(enabled)<br ALIGN="LEFT"/>handleExportInformationEvent()<br ALIGN="LEFT"/>handleFetchMeasurementEvent()<br ALIGN="LEFT"/>handleNextStageButtonClicked()<br ALIGN="LEFT"/>handleOkButtonPressed()<br ALIGN="LEFT"/>handlePauseButtonClicked()<br ALIGN="LEFT"/>handlePreviousStageButtonClicked()<br ALIGN="LEFT"/>handleRestartButtonClicked()<br ALIGN="LEFT"/>handleRunningStatus()<br ALIGN="LEFT"/>handleStartButtonClicked()<br ALIGN="LEFT"/>handleTabHasChanged(index)<br ALIGN="LEFT"/>handleTaskModelStatusHasChanged()<br ALIGN="LEFT"/>handleUpdateCalibCamEvent()<br ALIGN="LEFT"/>handleWorkingFolderButtonClicked()<br ALIGN="LEFT"/>performRestart()<br ALIGN="LEFT"/>showWarningPopup(msg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
    "configurationManager" [color="black", fontcolor="black", label=<{configurationManager}>, shape="record", style="solid"];
    "eventManager" [color="black", fontcolor="black", label=<{eventManager}>, shape="record", style="solid"];
}
subgraph layer2{
    rank = same;
    "digifloat.libs.dropDownMenu.ColoredMenuItem" [color="black", fontcolor="black", label=<{ColoredMenuItem|label<br ALIGN="LEFT"/>layout<br ALIGN="LEFT"/>widget<br ALIGN="LEFT"/>|set_color(bg_color, text_color)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
    "digifloat.libs.camAdapter.CamAdapter" [color="black", fontcolor="black", label=<{CamAdapter|className : str<br ALIGN="LEFT"/>|continueStream()<br ALIGN="LEFT"/>finishProcessesAndQueues()<br ALIGN="LEFT"/>getCalibCamInstance()<br ALIGN="LEFT"/>getCamInstance()<br ALIGN="LEFT"/>instantiateObject(taskModel)<br ALIGN="LEFT"/>instantiateTabViewCalibCam()<br ALIGN="LEFT"/>isRunning()<br ALIGN="LEFT"/>pauseStream()<br ALIGN="LEFT"/>requestQueueClosure(queue, sentinel_message)<br ALIGN="LEFT"/>startStream()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
}
subgraph layer3{
    rank = same;
    "digifloat.libs.tabViewBronkhorstFlowControl.TabViewBronkhorstFlowControl" [color="black", fontcolor="black", label=<{TabViewBronkhorstFlowControl|airFlowLabel<br ALIGN="LEFT"/>airFlowLabel2<br ALIGN="LEFT"/>bronkhorstFlowControlModel<br ALIGN="LEFT"/>pushButton<br ALIGN="LEFT"/>targetLineEdit<br ALIGN="LEFT"/>|handleSetAirFlowButtonPushed()<br ALIGN="LEFT"/>initUI()<br ALIGN="LEFT"/>updateAirFlowLabel()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
    "digifloat.libs.tabViewCalibCamDaheng.TabViewCalibCamDaheng" [color="black", fontcolor="black", label=<{TabViewCalibCamDaheng|aspect_ratio_label<br ALIGN="LEFT"/>aspect_ratio_spin<br ALIGN="LEFT"/>dahengCamModel<br ALIGN="LEFT"/>error_aspect_ratio<br ALIGN="LEFT"/>error_img_height<br ALIGN="LEFT"/>error_img_height_2<br ALIGN="LEFT"/>exposure_time_label<br ALIGN="LEFT"/>exposure_time_spin<br ALIGN="LEFT"/>exposure_time_unit_label<br ALIGN="LEFT"/>file_format_combo<br ALIGN="LEFT"/>gain_label<br ALIGN="LEFT"/>gain_spin<br ALIGN="LEFT"/>image_height_input<br ALIGN="LEFT"/>image_height_label<br ALIGN="LEFT"/>image_label<br ALIGN="LEFT"/>interval_label<br ALIGN="LEFT"/>interval_spin<br ALIGN="LEFT"/>interval_unit_label<br ALIGN="LEFT"/>normalize_checkbox<br ALIGN="LEFT"/>save_raw_checkbox<br ALIGN="LEFT"/>|expandWidgets()<br ALIGN="LEFT"/>handleNormalizeCheckboxStateChanged()<br ALIGN="LEFT"/>handleSaveRawCheckboxStateChanged()<br ALIGN="LEFT"/>initUI()<br ALIGN="LEFT"/>resetTabWidgets()<br ALIGN="LEFT"/>updateCalibCamImage()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
    "digifloat.libs.tabViewCalibCamRaspi.TabViewCalibCamRaspi" [color="black", fontcolor="black", label=<{TabViewCalibCamRaspi|aspect_ratio_label<br ALIGN="LEFT"/>aspect_ratio_spin<br ALIGN="LEFT"/>brightness_label<br ALIGN="LEFT"/>brightness_spin<br ALIGN="LEFT"/>color_space_combo<br ALIGN="LEFT"/>contrast_label<br ALIGN="LEFT"/>contrast_spin<br ALIGN="LEFT"/>error_aspect_ratio<br ALIGN="LEFT"/>exposure_time_label<br ALIGN="LEFT"/>exposure_time_spin<br ALIGN="LEFT"/>exposure_time_unit_label<br ALIGN="LEFT"/>gain_label<br ALIGN="LEFT"/>gain_spin<br ALIGN="LEFT"/>image_height_input<br ALIGN="LEFT"/>image_height_label<br ALIGN="LEFT"/>image_label<br ALIGN="LEFT"/>interval_label<br ALIGN="LEFT"/>interval_spin<br ALIGN="LEFT"/>interval_unit_label<br ALIGN="LEFT"/>normalize_checkbox<br ALIGN="LEFT"/>raspiCamModel<br ALIGN="LEFT"/>saturation_label<br ALIGN="LEFT"/>saturation_spin<br ALIGN="LEFT"/>save_raw_checkbox<br ALIGN="LEFT"/>sharpness_label<br ALIGN="LEFT"/>sharpness_spin<br ALIGN="LEFT"/>|expandWidgets()<br ALIGN="LEFT"/>handleNormalizeCheckboxStateChanged()<br ALIGN="LEFT"/>handleSaveRawCheckboxStateChanged()<br ALIGN="LEFT"/>initUI()<br ALIGN="LEFT"/>resetTabWidgets()<br ALIGN="LEFT"/>updateCalibCamImage()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
    "digifloat.libs.tabViewCalibLidar.TabViewCalibLidar" [color="black", fontcolor="black", label=<{TabViewCalibLidar|atlasSensor<br ALIGN="LEFT"/>define_button<br ALIGN="LEFT"/>defined_level_value<br ALIGN="LEFT"/>lidar<br ALIGN="LEFT"/>live_distance_value<br ALIGN="LEFT"/>mainWindow<br ALIGN="LEFT"/>window<br ALIGN="LEFT"/>|definePulpLevel()<br ALIGN="LEFT"/>expandWidgets()<br ALIGN="LEFT"/>initUI()<br ALIGN="LEFT"/>set_Window(window)<br ALIGN="LEFT"/>updateLidarDisplay()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
    "digifloat.libs.tabViewCalibSensors.TabViewCalibSensors" [color="black", fontcolor="black", label=<{TabViewCalibSensors|atlasSensor<br ALIGN="LEFT"/>deviceDictionary<br ALIGN="LEFT"/>lowerLineEdit<br ALIGN="LEFT"/>lowerTargetLineEdit<br ALIGN="LEFT"/>middleLineEdit<br ALIGN="LEFT"/>middleTargetLineEdit<br ALIGN="LEFT"/>modules_list_combo<br ALIGN="LEFT"/>pushLower<br ALIGN="LEFT"/>pushMiddle<br ALIGN="LEFT"/>pushUpper<br ALIGN="LEFT"/>sensorOutputLabel<br ALIGN="LEFT"/>upperLineEdit<br ALIGN="LEFT"/>upperTargetLineEdit<br ALIGN="LEFT"/>|handleComboBoxChanged()<br ALIGN="LEFT"/>handleLowerButtonPushed()<br ALIGN="LEFT"/>handleMiddleButtonPushed()<br ALIGN="LEFT"/>handleUpperButtonPushed()<br ALIGN="LEFT"/>initUI()<br ALIGN="LEFT"/>updateSensorOutputLabel()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
    "digifloat.libs.tabViewInformation.TabViewInformation" [color="black", fontcolor="black", label=<{TabViewInformation|df_flotationProducts<br ALIGN="LEFT"/>df_waterUsage<br ALIGN="LEFT"/>export_button<br ALIGN="LEFT"/>flotation_cell_water_sample<br ALIGN="LEFT"/>flotation_cell_weight<br ALIGN="LEFT"/>flotation_products_layout<br ALIGN="LEFT"/>lidar<br ALIGN="LEFT"/>lidar_distance<br ALIGN="LEFT"/>observations<br ALIGN="LEFT"/>sample_mass<br ALIGN="LEFT"/>table_floationProducts<br ALIGN="LEFT"/>table_waterusage<br ALIGN="LEFT"/>taskModel<br ALIGN="LEFT"/>|connectToMqtt(broker, port, topic_sub, topic_pub, username, password)<br ALIGN="LEFT"/>disconnectFromMqtt(mqttInterface)<br ALIGN="LEFT"/>exportInformation()<br ALIGN="LEFT"/>generateTableWidgetFromDataframe(df)<br ALIGN="LEFT"/>initUI()<br ALIGN="LEFT"/>loadDataIntoDataFrameFromTableWidget(tableWidget, df_target)<br ALIGN="LEFT"/>reloadTablesForNewSetup()<br ALIGN="LEFT"/>resetInformationTab()<br ALIGN="LEFT"/>updateTableWidgetFromDataframe(df, tableWidget_target)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
    "digifloat.libs.tabViewRestartExit.TabViewRestartExit" [color="black", fontcolor="black", label=<{TabViewRestartExit|camAdapater<br ALIGN="LEFT"/>exit_button<br ALIGN="LEFT"/>restart_button<br ALIGN="LEFT"/>|initUI()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
    "digifloat.libs.tabViewRun.TabViewRun" [color="black", fontcolor="black", label=<{TabViewRun|air_flow_rate<br ALIGN="LEFT"/>ec_label<br ALIGN="LEFT"/>lidar_label<br ALIGN="LEFT"/>next_stage_button<br ALIGN="LEFT"/>next_stage_label<br ALIGN="LEFT"/>next_stage_title<br ALIGN="LEFT"/>next_stage_type<br ALIGN="LEFT"/>orp_label<br ALIGN="LEFT"/>pause_button<br ALIGN="LEFT"/>ph_label<br ALIGN="LEFT"/>prev_stage_button<br ALIGN="LEFT"/>reagent_concentration<br ALIGN="LEFT"/>reagent_layout<br ALIGN="LEFT"/>reagent_name<br ALIGN="LEFT"/>reagent_volume<br ALIGN="LEFT"/>rotor_speed<br ALIGN="LEFT"/>stage_label<br ALIGN="LEFT"/>start_button<br ALIGN="LEFT"/>status_label<br ALIGN="LEFT"/>status_text<br ALIGN="LEFT"/>target_ph<br ALIGN="LEFT"/>taskModel<br ALIGN="LEFT"/>temp_label<br ALIGN="LEFT"/>time_label<br ALIGN="LEFT"/>type_label<br ALIGN="LEFT"/>window<br ALIGN="LEFT"/>|displayMeasuredValueAndCheckForTolerance(widget_identifier, deviceHandle: FormalHardwareInterface)<br ALIGN="LEFT"/>displayMeasurementCompleted()<br ALIGN="LEFT"/>displayMeasurementParameters()<br ALIGN="LEFT"/>displayRemainingTime(remainingTimeInStage, beepFlag)<br ALIGN="LEFT"/>displayRunningStatus()<br ALIGN="LEFT"/>displayTargetTimeAndStages()<br ALIGN="LEFT"/>expandAirFlowRateLabel()<br ALIGN="LEFT"/>expandReagentTable()<br ALIGN="LEFT"/>expandWidgets()<br ALIGN="LEFT"/>get_PySimpleGui_tab()<br ALIGN="LEFT"/>initUI()<br ALIGN="LEFT"/>set_Window(window)<br ALIGN="LEFT"/>startClicked()<br ALIGN="LEFT"/>updateToPausedStatus()<br ALIGN="LEFT"/>updateWholeRunTabToCurrentStage()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
    "digifloat.libs.tabViewSetup.TabViewSetup" [color="black", fontcolor="black", label=<{TabViewSetup|atlasSensor<br ALIGN="LEFT"/>camInstance<br ALIGN="LEFT"/>cameraLabel<br ALIGN="LEFT"/>condLabel<br ALIGN="LEFT"/>devicesLabel<br ALIGN="LEFT"/>lidar<br ALIGN="LEFT"/>lidarLabel<br ALIGN="LEFT"/>okButton<br ALIGN="LEFT"/>orLabel<br ALIGN="LEFT"/>phLabel<br ALIGN="LEFT"/>sampleLabel<br ALIGN="LEFT"/>sampleList<br ALIGN="LEFT"/>tableScheme<br ALIGN="LEFT"/>tableSchemeSample<br ALIGN="LEFT"/>taskModel<br ALIGN="LEFT"/>tempLabel<br ALIGN="LEFT"/>workFolderButton<br ALIGN="LEFT"/>|displaySampleScheme()<br ALIGN="LEFT"/>displaySchemeAndSamplenames()<br ALIGN="LEFT"/>expandWidgets()<br ALIGN="LEFT"/>generateTableWidgetFromDataframe(df)<br ALIGN="LEFT"/>initUI()<br ALIGN="LEFT"/>updateTableWidgetFromDataframe(df, tableWidget_target)<br ALIGN="LEFT"/>workingFolderButtonClicked()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
}
subgraph layer4{
    rank = same;
    "digifloat.libs.atlasSensorWrapper.AtlasSensorWrapper" [color="black", fontcolor="black", label=<{AtlasSensorWrapper|<br ALIGN="LEFT"/>|getDisplayValue()<br ALIGN="LEFT"/>getMeasuredValue()<br ALIGN="LEFT"/>queryHighAverage(target)<br ALIGN="LEFT"/>queryLowAverage(target)<br ALIGN="LEFT"/>queryMidAverage(target)<br ALIGN="LEFT"/>setRelativeTolerance(lower_tolerance, upper_tolerance)<br ALIGN="LEFT"/>setTargetValueColumn(targetValueColumn)<br ALIGN="LEFT"/>updateMeasuredValue()<br ALIGN="LEFT"/>valueInTolerance()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
    "digifloat.libs.bronkhorstFlowControlModel.BronkhorstFlowControlModel" [color="black", fontcolor="black", label=<{BronkhorstFlowControlModel|instrument : NoneType<br ALIGN="LEFT"/>measuredAirFlow : float<br ALIGN="LEFT"/>measuredSetAirFlow : float<br ALIGN="LEFT"/>successINIT : bool<br ALIGN="LEFT"/>|connectedSuccessfully()<br ALIGN="LEFT"/>fetchAirFlow()<br ALIGN="LEFT"/>getAirFlow()<br ALIGN="LEFT"/>getConnection()<br ALIGN="LEFT"/>getSetAirFlow()<br ALIGN="LEFT"/>setAirFlow(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
    "digifloat.libs.dahengCamModel.DahengCamModel" [color="black", fontcolor="black", label=<{DahengCamModel|camCalib : bool<br ALIGN="LEFT"/>camera_trademark : str<br ALIGN="LEFT"/>colorCAM : str<br ALIGN="LEFT"/>configuration<br ALIGN="LEFT"/>image_array<br ALIGN="LEFT"/>imgH : int<br ALIGN="LEFT"/>imgW : int<br ALIGN="LEFT"/>last_fetched_image : NoneType<br ALIGN="LEFT"/>message_queue<br ALIGN="LEFT"/>successINIT : bool<br ALIGN="LEFT"/>taskModel<br ALIGN="LEFT"/>|connectedSuccessfully()<br ALIGN="LEFT"/>getImageDictForSavingOffline()<br ALIGN="LEFT"/>getLatestImage(image_format)<br ALIGN="LEFT"/>get_camCalib()<br ALIGN="LEFT"/>get_colorCAM()<br ALIGN="LEFT"/>get_exposureTime()<br ALIGN="LEFT"/>get_fmt()<br ALIGN="LEFT"/>get_gain()<br ALIGN="LEFT"/>get_imgH()<br ALIGN="LEFT"/>get_imgNorm()<br ALIGN="LEFT"/>get_imgRaw()<br ALIGN="LEFT"/>get_imgW()<br ALIGN="LEFT"/>get_intervalbild()<br ALIGN="LEFT"/>get_successINIT()<br ALIGN="LEFT"/>get_taskModel()<br ALIGN="LEFT"/>queryUpdateCamSettings(gain, exposureTime, intervalbild, NimageWidth, NimageHeight)<br ALIGN="LEFT"/>set_camCalib(value)<br ALIGN="LEFT"/>set_colorCAM(value)<br ALIGN="LEFT"/>set_exposureTime(value)<br ALIGN="LEFT"/>set_fmt(value)<br ALIGN="LEFT"/>set_gain(value)<br ALIGN="LEFT"/>set_imgH(value)<br ALIGN="LEFT"/>set_imgNorm(value)<br ALIGN="LEFT"/>set_imgRaw(value)<br ALIGN="LEFT"/>set_imgW(value)<br ALIGN="LEFT"/>set_intervalbild(value)<br ALIGN="LEFT"/>set_successINIT(value)<br ALIGN="LEFT"/>set_taskModel(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
    "digifloat.libs.dataForwarder.DataForwarder" [color="black", fontcolor="black", label=<{DataForwarder|camInstance<br ALIGN="LEFT"/>configuration : NoneType, dict<br ALIGN="LEFT"/>controller<br ALIGN="LEFT"/>taskModel<br ALIGN="LEFT"/>|collectInsights(images_included)<br ALIGN="LEFT"/>collectMeasurementData()<br ALIGN="LEFT"/>fetchImageBytes()<br ALIGN="LEFT"/>filterDictForDataLakeDataColumns(dct)<br ALIGN="LEFT"/>finishProcessesAndQueues()<br ALIGN="LEFT"/>getBroker()<br ALIGN="LEFT"/>getPassword()<br ALIGN="LEFT"/>getPort()<br ALIGN="LEFT"/>getTopic_pub()<br ALIGN="LEFT"/>getUsername()<br ALIGN="LEFT"/>isRunning()<br ALIGN="LEFT"/>pushDataToDataLake(images_included)<br ALIGN="LEFT"/>reconnectStreamToMqttBroker(broker, port, topic_sub, topic_pub, username, password)<br ALIGN="LEFT"/>requestQueueClosure(queue, sentinel_message)<br ALIGN="LEFT"/>setController(controller)<br ALIGN="LEFT"/>startDataForwarderService()<br ALIGN="LEFT"/>terminateForwarderService()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
    "digifloat.libs.imageStorage.ImageStorage" [color="black", fontcolor="black", label=<{ImageStorage|image_dict_queue<br ALIGN="LEFT"/>message_queue<br ALIGN="LEFT"/>|finishProcessesAndQueues()<br ALIGN="LEFT"/>isRunning()<br ALIGN="LEFT"/>requestQueueClosure(queue, sentinel_message)<br ALIGN="LEFT"/>saveImageOffline()<br ALIGN="LEFT"/>startOfflineStorageService()<br ALIGN="LEFT"/>stopOfflineStorageService()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
    "digifloat.libs.raspiCamModel.RaspiCamModel" [color="black", fontcolor="black", label=<{RaspiCamModel|camCalib : bool<br ALIGN="LEFT"/>colorCAM : str<br ALIGN="LEFT"/>configuration<br ALIGN="LEFT"/>imageHeight : int<br ALIGN="LEFT"/>imageWidth : int<br ALIGN="LEFT"/>image_array<br ALIGN="LEFT"/>last_fetched_image : NoneType<br ALIGN="LEFT"/>message_queue<br ALIGN="LEFT"/>successINIT : bool<br ALIGN="LEFT"/>taskModel<br ALIGN="LEFT"/>|connectedSuccessfully()<br ALIGN="LEFT"/>getImageDictForSavingOffline()<br ALIGN="LEFT"/>getImageHeight()<br ALIGN="LEFT"/>getImageWidth()<br ALIGN="LEFT"/>getLatestImage(image_format)<br ALIGN="LEFT"/>getLatestUnformattedImage()<br ALIGN="LEFT"/>get_camCalib()<br ALIGN="LEFT"/>get_colorCAM()<br ALIGN="LEFT"/>get_exposureTime()<br ALIGN="LEFT"/>get_fmt()<br ALIGN="LEFT"/>get_gain()<br ALIGN="LEFT"/>get_image()<br ALIGN="LEFT"/>get_imageSharpness()<br ALIGN="LEFT"/>get_imgB()<br ALIGN="LEFT"/>get_imgC()<br ALIGN="LEFT"/>get_imgNorm()<br ALIGN="LEFT"/>get_imgRaw()<br ALIGN="LEFT"/>get_imgS()<br ALIGN="LEFT"/>get_intervalbild()<br ALIGN="LEFT"/>get_successINIT()<br ALIGN="LEFT"/>get_taskModel()<br ALIGN="LEFT"/>queryUpdateCamSettings(intervalbild, gain, exposureTime, NimageWidth, NimageHeight, NimageBrightness, NimageContrast, NimageSaturation, NimageSharpness)<br ALIGN="LEFT"/>set_camCalib(value)<br ALIGN="LEFT"/>set_colorCAM(value)<br ALIGN="LEFT"/>set_exposureTime(value)<br ALIGN="LEFT"/>set_fmt(value)<br ALIGN="LEFT"/>set_gain(value)<br ALIGN="LEFT"/>set_image(value)<br ALIGN="LEFT"/>set_imageSharpness(value)<br ALIGN="LEFT"/>set_imgB(value)<br ALIGN="LEFT"/>set_imgC(value)<br ALIGN="LEFT"/>set_imgNorm(value)<br ALIGN="LEFT"/>set_imgRaw(value)<br ALIGN="LEFT"/>set_imgS(value)<br ALIGN="LEFT"/>set_intervalbild(value)<br ALIGN="LEFT"/>set_successINIT(value)<br ALIGN="LEFT"/>set_taskModel(value)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
    "digifloat.libs.taskModel.TaskModel" [color="black", fontcolor="black", label=<{TaskModel|atlasSensor<br ALIGN="LEFT"/>camera<br ALIGN="LEFT"/>currentstage : int<br ALIGN="LEFT"/>currentstagename<br ALIGN="LEFT"/>currentstagetype<br ALIGN="LEFT"/>defaultFilePath<br ALIGN="LEFT"/>flotationtime : int<br ALIGN="LEFT"/>lidar<br ALIGN="LEFT"/>nconc<br ALIGN="LEFT"/>nstages<br ALIGN="LEFT"/>samplefolder : NoneType<br ALIGN="LEFT"/>samplenames : NoneType<br ALIGN="LEFT"/>scheme : NoneType<br ALIGN="LEFT"/>schemesample : NoneType<br ALIGN="LEFT"/>selectedSample : NoneType<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>status : str<br ALIGN="LEFT"/>statusHasChanged<br ALIGN="LEFT"/>t1 : int<br ALIGN="LEFT"/>t1flot : int<br ALIGN="LEFT"/>t2 : int<br ALIGN="LEFT"/>t2flot : int<br ALIGN="LEFT"/>targett : int<br ALIGN="LEFT"/>workingfolder<br ALIGN="LEFT"/>|adjustForTimeSpentInCurrentStage()<br ALIGN="LEFT"/>calculateRemainingTimeInCurrentStage()<br ALIGN="LEFT"/>checkIfTargetPhIsSet()<br ALIGN="LEFT"/>dumpValue(MOD, measuredValue)<br ALIGN="LEFT"/>getCurrentTargetValue(column)<br ALIGN="LEFT"/>getListOfRemainingSamples()<br ALIGN="LEFT"/>getTargetAirFlowRate()<br ALIGN="LEFT"/>initializeMeasurement()<br ALIGN="LEFT"/>moveToFirstStage()<br ALIGN="LEFT"/>moveToNextStage()<br ALIGN="LEFT"/>moveToPreviousStage()<br ALIGN="LEFT"/>openStrippedFile(path)<br ALIGN="LEFT"/>provideSemiStructuredData()<br ALIGN="LEFT"/>setCamera(cam)<br ALIGN="LEFT"/>stageTypeHasChanged()<br ALIGN="LEFT"/>tryToLoadSampleFile()<br ALIGN="LEFT"/>tryToLoadSchemeFile(parent_view)<br ALIGN="LEFT"/>tryToLoadSchemeSampleAndCreateSampleFolder()<br ALIGN="LEFT"/>updateSamplesFile()<br ALIGN="LEFT"/>updateTimeSpentInCurrentStage()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
}
subgraph layer5{
    rank = same;
    "digifloat.libs.lidar.Lidar" [color="black", fontcolor="black", label=<{Lidar|colorLIDAR<br ALIGN="LEFT"/>colorLIDAR : str<br ALIGN="LEFT"/>pulplevel<br ALIGN="LEFT"/>pulplevel : str, int<br ALIGN="LEFT"/>showLIDAR<br ALIGN="LEFT"/>showLIDAR : bool<br ALIGN="LEFT"/>|connectToLidar(atlasSensor)<br ALIGN="LEFT"/>connectedSuccessfully()<br ALIGN="LEFT"/>getDisplayValue()<br ALIGN="LEFT"/>getMeasuredValue()<br ALIGN="LEFT"/>getMeasuredValueFromLIDAR()<br ALIGN="LEFT"/>queryHighAverage(MOD)<br ALIGN="LEFT"/>queryLowAverage(MOD)<br ALIGN="LEFT"/>queryMidAverage(MOD)<br ALIGN="LEFT"/>updateMeasuredValue()<br ALIGN="LEFT"/>valueInTolerance()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
    "digifloat.libs.atlasSensor.AtlasSensor" [color="black", fontcolor="black", label=<{AtlasSensor|colorCond<br ALIGN="LEFT"/>colorCond : str<br ALIGN="LEFT"/>colorOR<br ALIGN="LEFT"/>colorOR : str<br ALIGN="LEFT"/>colorT<br ALIGN="LEFT"/>colorT : str<br ALIGN="LEFT"/>colorpH<br ALIGN="LEFT"/>colorpH : str<br ALIGN="LEFT"/>device<br ALIGN="LEFT"/>device : NoneType<br ALIGN="LEFT"/>device_list<br ALIGN="LEFT"/>device_list : list<br ALIGN="LEFT"/>modules_list<br ALIGN="LEFT"/>modules_list : list<br ALIGN="LEFT"/>times_list<br ALIGN="LEFT"/>times_list : dict<br ALIGN="LEFT"/>|connect_devices()<br ALIGN="LEFT"/>connectedSuccessfully()<br ALIGN="LEFT"/>get_devices()<br ALIGN="LEFT"/>print_devices()<br ALIGN="LEFT"/>queryHighAverage(MOD, target)<br ALIGN="LEFT"/>queryLowAverage(MOD, target)<br ALIGN="LEFT"/>queryMidAverage(MOD, target)<br ALIGN="LEFT"/>readOutValue(MOD)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
    "digifloat.libs.dahengCamModelSubProcess" [color="black", fontcolor="black", label=<{dahengCamModelSubProcess}>, shape="record", style="solid"];
    "digifloat.libs.dataForwarderSubProcess" [color="black", fontcolor="black", label=<{dataForwarderSubProcess}>, shape="record", style="solid"];
    "digifloat.libs.raspiCamSubProcess" [color="black", fontcolor="black", label=<{raspiCamSubProcess}>, shape="record", style="solid"];
    "digifloat.libs.imageStorageSubProcess" [color="black", fontcolor="black", label=<{imageStorageSubProcess}>, shape="record", style="solid"];
}
subgraph layer6{
    rank = same;
    "digifloat.libs.AtlasI2C.AtlasI2C" [color="black", fontcolor="black", label=<{AtlasI2C|DEFAULT_ADDRESS : int<br ALIGN="LEFT"/>DEFAULT_BUS : int<br ALIGN="LEFT"/>LONG_TIMEOUT : float<br ALIGN="LEFT"/>LONG_TIMEOUT_COMMANDS : tuple<br ALIGN="LEFT"/>SHORT_TIMEOUT : float<br ALIGN="LEFT"/>SLEEP_COMMANDS : tuple<br ALIGN="LEFT"/>address<br ALIGN="LEFT"/>bus : int<br ALIGN="LEFT"/>file_read<br ALIGN="LEFT"/>file_write<br ALIGN="LEFT"/>long_timeout<br ALIGN="LEFT"/>moduletype<br ALIGN="LEFT"/>name<br ALIGN="LEFT"/>short_timeout<br ALIGN="LEFT"/>|app_using_python_two()<br ALIGN="LEFT"/>close()<br ALIGN="LEFT"/>get_command_timeout(command)<br ALIGN="LEFT"/>get_device_info()<br ALIGN="LEFT"/>get_response(raw_data)<br ALIGN="LEFT"/>handle_raspi_glitch(response)<br ALIGN="LEFT"/>list_i2c_devices()<br ALIGN="LEFT"/>query(command)<br ALIGN="LEFT"/>read(num_of_bytes)<br ALIGN="LEFT"/>response_valid(response)<br ALIGN="LEFT"/>set_i2c_address(addr)<br ALIGN="LEFT"/>write(cmd)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
    "digifloat.libs.hardwareInfoProvider" [color="black", fontcolor="black", label=<{hardwareInfoProvider}>, shape="record", style="solid"];
    "digifloat.libs.mqttInterface.MqttInterface" [color="black", fontcolor="black", label=<{MqttInterface|broker : str<br ALIGN="LEFT"/>client : NoneType, Client<br ALIGN="LEFT"/>client_id<br ALIGN="LEFT"/>messageCounter : int<br ALIGN="LEFT"/>msg : list<br ALIGN="LEFT"/>password : str<br ALIGN="LEFT"/>port : int<br ALIGN="LEFT"/>start<br ALIGN="LEFT"/>stop<br ALIGN="LEFT"/>timestamp_list : list<br ALIGN="LEFT"/>timing_list : list<br ALIGN="LEFT"/>topic_pub : str<br ALIGN="LEFT"/>topic_sub : str<br ALIGN="LEFT"/>username : str<br ALIGN="LEFT"/>|connectMqtt()<br ALIGN="LEFT"/>publish(msg, local_topic_pub)<br ALIGN="LEFT"/>subscribe()<br ALIGN="LEFT"/>subscribeToTimer(on_message, timer_topic)<br ALIGN="LEFT"/>waitForMsg()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
    "picamera2" [color="black", fontcolor="black", label=<{picamera2}>, shape="record", style="solid"];
    "gxipy" [color="black", fontcolor="black", label=<{gxipy}>, shape="record", style="solid"];
    "serial" [color="black", fontcolor="black", label=<{serial}>, shape="record", style="solid"];
}
subgraph layer7{
    rank = same;
    "paho.mqtt" [color="black", fontcolor="black", label=<{paho.mqtt}>, shape="record", style="solid"];
    "digifloat.libs.trackCPUusage" [color="black", fontcolor="black", label=<{trackCPUusage}>, shape="record", style="solid"];
    "digifloat.libs.trackMAC" [color="black", fontcolor="black", label=<{trackMAC}>, shape="record", style="solid"];
    "digifloat.libs.trackRAMusage" [color="black", fontcolor="black", label=<{trackRAMusage}>, shape="record", style="solid"];
    "digifloat.libs.trackTemperature" [color="black", fontcolor="black", label=<{trackTemperature}>, shape="record", style="solid"];
    "digifloat.libs.trackTraffic" [color="black", fontcolor="black", label=<{trackTraffic}>, shape="record", style="solid"];
}
"digifloat.libs.atlasSensor.AtlasSensor" -> "digifloat.libs.AtlasI2C.AtlasI2C" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="device", style="solid"];
"digifloat.libs.tabViewCalibSensors.TabViewCalibSensors" -> "digifloat.libs.atlasSensorWrapper.AtlasSensorWrapper" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="deviceDictionary", style="solid"];
"digifloat.libs.atlasSensorWrapper.AtlasSensorWrapper" -> "digifloat.libs.atlasSensor.AtlasSensor" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="_MOD", style="solid"];
"digifloat.libs.atlasSensorWrapper.AtlasSensorWrapper" -> "digifloat.libs.lidar.Lidar" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="_MOD", style="solid"];
"digifloat.libs.tabViewBronkhorstFlowControl.TabViewBronkhorstFlowControl" -> "digifloat.libs.bronkhorstFlowControlModel.BronkhorstFlowControlModel" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="bronkhorstFlowControlModel", style="solid"];
"digifloat.libs.controller.Controller" -> "digifloat.libs.camAdapter.CamAdapter" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="camAdapter", style="solid"];
"digifloat.DigiFloat.MainWindow" -> "digifloat.libs.controller.Controller" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="controller", style="solid"];
"digifloat.libs.tabViewCalibCamDaheng.TabViewCalibCamDaheng" -> "digifloat.libs.dahengCamModel.DahengCamModel" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="_cam_handle", style="solid"];
"digifloat.libs.controller.Controller" -> "digifloat.libs.dataForwarder.DataForwarder" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="dataForwarder", style="solid"];
"digifloat.libs.dropDownMenu.DropDownMenu" -> "digifloat.libs.dropDownMenu.ColoredMenuItem" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="offline_action", style="solid"];
"digifloat.libs.dropDownMenu.DropDownMenu" -> "digifloat.libs.dropDownMenu.ColoredMenuItem" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="online_action", style="solid"];
"digifloat.DigiFloat.MainWindow" -> "digifloat.libs.dropDownMenu.DropDownMenu" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="dropDownMenu", style="solid"];
"digifloat.DigiFloat.MainWindow" -> "digifloat.DigiFloat.EnterProjectWindow" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="dropDownMenu", style="solid"];
"digifloat.libs.controller.Controller" -> "digifloat.libs.imageStorage.ImageStorage" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="imageStorage", style="solid"];
"digifloat.libs.imageStorage.ImageStorage" -> "digifloat.libs.imageStorageSubProcess" [arrowhead="none", arrowtail="none", fontcolor="blue", label="uses separate process", style="dotted"];
"digifloat.libs.tabViewCalibLidar.TabViewCalibLidar" -> "digifloat.libs.lidar.Lidar" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="lidar", style="solid"];
"digifloat.libs.lidar.Lidar" -> "serial" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="uses module", style="solid"];
"digifloat.libs.tabViewCalibCamRaspi.TabViewCalibCamRaspi" -> "digifloat.libs.raspiCamModel.RaspiCamModel" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="_cam_handle", style="solid"];
"digifloat.libs.controller.Controller" -> "digifloat.libs.tabViewBronkhorstFlowControl.TabViewBronkhorstFlowControl" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="tabViewBronkhorstFlowControl", style="solid"];
"digifloat.libs.camAdapter.CamAdapter" -> "digifloat.libs.tabViewCalibCamDaheng.TabViewCalibCamDaheng" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="_tabViewCalibCamRaspi", style="solid"];
"digifloat.libs.camAdapter.CamAdapter" -> "digifloat.libs.tabViewCalibCamRaspi.TabViewCalibCamRaspi" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="_tabViewCalibCamRaspi", style="solid"];
"digifloat.libs.controller.Controller" -> "digifloat.libs.tabViewCalibLidar.TabViewCalibLidar" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="tabViewCalibLidar", style="solid"];
"digifloat.libs.controller.Controller" -> "digifloat.libs.tabViewCalibSensors.TabViewCalibSensors" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="tabViewCalibSensors", style="solid"];
"digifloat.libs.controller.Controller" -> "digifloat.libs.tabViewInformation.TabViewInformation" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="tabViewInformation", style="solid"];
"digifloat.libs.controller.Controller" -> "digifloat.libs.tabViewRestartExit.TabViewRestartExit" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="tabViewRestartExit", style="solid"];
"digifloat.libs.controller.Controller" -> "digifloat.libs.tabViewRun.TabViewRun" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="tabViewRun", style="solid"];
"digifloat.libs.controller.Controller" -> "digifloat.libs.tabViewSetup.TabViewSetup" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="tabViewSetup", style="solid"];
"digifloat.libs.tabViewRun.TabViewRun" -> "digifloat.libs.taskModel.TaskModel" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="taskModel", style="solid"];
"digifloat.libs.tabViewSetup.TabViewSetup" -> "digifloat.libs.taskModel.TaskModel" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="taskModel", style="solid"];
"digifloat.libs.dahengCamModel.DahengCamModel" -> "digifloat.libs.dahengCamModelSubProcess" [arrowhead="none", arrowtail="none", fontcolor="blue", label="uses separate process", style="dotted"];
"digifloat.libs.dahengCamModelSubProcess" -> "gxipy" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="uses module", style="solid"];
"digifloat.libs.dataForwarder.DataForwarder" -> "digifloat.libs.dataForwarderSubProcess" [arrowhead="none", arrowtail="none", fontcolor="blue", label="uses separate process", style="dotted"];
"digifloat.libs.dataForwarderSubProcess" -> "digifloat.libs.hardwareInfoProvider" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="uses module", style="solid"];
"digifloat.libs.dataForwarderSubProcess" -> "digifloat.libs.mqttInterface.MqttInterface" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="mqttInterface", style="solid"];
"digifloat.libs.mqttInterface.MqttInterface" -> "paho.mqtt" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="uses module", style="solid"];
"digifloat.libs.hardwareInfoProvider" -> "digifloat.libs.trackCPUusage" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="uses module", style="solid"];
"digifloat.libs.hardwareInfoProvider" -> "digifloat.libs.trackMAC" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="uses module", style="solid"];
"digifloat.libs.hardwareInfoProvider" -> "digifloat.libs.trackRAMusage" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="uses module", style="solid"];
"digifloat.libs.hardwareInfoProvider" -> "digifloat.libs.trackTemperature" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="uses module", style="solid"];
"digifloat.libs.hardwareInfoProvider" -> "digifloat.libs.trackTraffic" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="uses module", style="solid"];
"digifloat.libs.raspiCamModel.RaspiCamModel" -> "digifloat.libs.raspiCamSubProcess" [arrowhead="none", arrowtail="none", fontcolor="blue", label="uses separate process", style="dotted"];
"digifloat.libs.raspiCamSubProcess" -> "picamera2" [arrowhead="normal", arrowtail="none", fontcolor="blue", label="uses module", style="solid"];
}